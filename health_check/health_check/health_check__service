#!/bin/bash
# MIT License
#
# Copyright (C) 2023 Nectar Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
##########################################################################################
# Description:
#   This script is used to start, stop, restart, and check the status of the
#   health_check service.
#

### BEGIN INIT INFO
# Provides:          health_check
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Health Check Service
### END INIT INFO

SCRIPT_NAME=$(basename "${0}")
VERSION="1.53"
SERVICE_DISPLAY_NAME="Health Check Service"
SERVICE_NAME="health_check"
TMUX_SESSION_NAME="${SERVICE_NAME}_service"
CONF_FILE_NAME="${SERVICE_NAME}.conf"
CONF_DIR="/etc/${SERVICE_NAME}"
INSTALL_DIR="/opt/${SERVICE_NAME}"
LOG_DIR="${INSTALL_DIR}/log"
LOG="${LOG_DIR}/${SERVICE_NAME}.log"
SERVICE_CONF_DIR="/etc/init.d"
SERVICE_PYTHON_FILE_NAME="${SERVICE_NAME}_service.py"
MSG_RUNNING="${SERVICE_DISPLAY_NAME} is running."
MSG_NOT_RUNNING="${SERVICE_DISPLAY_NAME} is not running."
START=0 # 0 for False, 1 for True.
TURN_OFF_SINGLE_LINE_TIMEOUT_COUNTDOWN=0 # 0 for False, 1 for True.
IGNORE_SERVICE_START_FAILURES=0 # 0 for False, 1 for True.
START_FAILED=0 # 0 for False, 1 for True.
START_WAIT_TIMEOUT=120 # Seconds.

function tmux_session_exists() {
    if tmux list-sessions 2>&1 |grep ${TMUX_SESSION_NAME}; then
        echo 1 # True
    else
        echo 0 # False
    fi
}

function service_process_is_running() {
    if ps aux |grep ${SERVICE_PYTHON_FILE_NAME} |grep -v grep; then
        echo 1 # True
    else
        echo 0 # False
    fi
}

function service_is_alive() {
    SERVICE_IP="0.0.0.0"
    SERVICE_PORT=$(grep listen_port ${CONF_DIR}/${CONF_FILE_NAME} |awk -F '=' '{print $2}' |awk '{print $1}')
    IP_PORT="${SERVICE_IP}:${SERVICE_PORT}"
#    RESULT_JSON=$(python3 ${INSTALL_DIR}/health_check_client.py --remote_host ${SERVICE_IP} --remote_port ${SERVICE_PORT} --check_tcp)
#    if echo ${RESULT_JSON} |grep status |grep -q UP; then
    if ss -tan |grep ${IP_PORT}; then
        echo 1 # True
    else
        echo 0 # False
    fi
}

function tmux_wait_for_session_to_exit() {
    sleep 0.5
    while [[ "$(tmux list-sessions 2>&1 |grep ${TMUX_SESSION_NAME})" != "" ]]; do
        sleep 0.5
    done
}

function tmux_kill_session() {
    tmux kill-session -t ${TMUX_SESSION_NAME} 2>/dev/null
    tmux_wait_for_session_to_exit
}

function tmux_start_session() {
    if [[ "$(tmux_session_exists)" == "1" ]]; then
        echo "tmux session \"${TMUX_SESSION_NAME}\" already started."
    else
        tmux new-session -d -s ${TMUX_SESSION_NAME}
    fi
}

function tmux_execute_cmd() {
    CMD=${1}
    tmux send-keys -t ${TMUX_SESSION_NAME} "${CMD}"
    tmux send-keys -t ${TMUX_SESSION_NAME} "Enter"
}

function erase_line() {
    if [[ "${TURN_OFF_SINGLE_LINE_TIMEOUT_COUNTDOWN}" == "0" ]]; then
        printf "\r%b" "\033[2K"
    fi
}

function wait_loop() {
    _FUNC="${1}"
    _BEGIN_MSG="${2}"
    _WAITING_MSG="${3}"
    _STARTED_MSG="${4}"
    INNER_LOOP_INCREMENT=0.3 # Seconds.
    SCALE=1 # Number of decimal places to use for bc.
    START_WAIT_TIMEOUT_COUNTER=0
    WAIT_REMAINING=0
    FAILED=0
    if [[ "${TURN_OFF_SINGLE_LINE_TIMEOUT_COUNTDOWN}" == "1" ]]; then
        _ECHO_OPT=""
        _ECHO_END_LINE=""
    else
        _ECHO_OPT="-ne"
        _ECHO_END_LINE="\r"
    fi
    echo ${_ECHO_OPT} "  ${SERVICE_DISPLAY_NAME}: Checking ${_BEGIN_MSG}${_ECHO_END_LINE}"
    # Wait for the tmux session to start.
    while [[ "$(${_FUNC})" == "0" ]]; do
        WAIT_REMAINING=$(echo "scale=${SCALE}; ${START_WAIT_TIMEOUT} - ${START_WAIT_TIMEOUT_COUNTER}" | bc)
        erase_line
        echo ${_ECHO_OPT} "  ${SERVICE_DISPLAY_NAME}: (WAIT TIMEOUT: ${WAIT_REMAINING}) Waiting for service ${_WAITING_MSG}${_ECHO_END_LINE}"
        sleep ${INNER_LOOP_INCREMENT}
        START_WAIT_TIMEOUT_COUNTER=$(echo "scale=${SCALE}; ${START_WAIT_TIMEOUT_COUNTER} + ${INNER_LOOP_INCREMENT}" | bc)
        if (( $(echo "${START_WAIT_TIMEOUT_COUNTER} > ${START_WAIT_TIMEOUT}" |bc -l) )); then
            erase_line
            if [[ "${IGNORE_SERVICE_START_FAILURES}" == "1" ]]; then
                echo "  ${SERVICE_DISPLAY_NAME}: (FAIL, IGNORED) Timed out waiting for service ${_WAITING_MSG}"
                touch /tmp/${SERVICE_NAME}_start_failed
                FAILED=1
                break
            else
                echo "  ${SERVICE_DISPLAY_NAME}: (FAIL) Timed out waiting for service ${_WAITING_MSG}"
                exit 1
            fi
        fi
    done

    if [[ "${FAILED}" == "0" ]]; then
        erase_line
        echo "  ${SERVICE_DISPLAY_NAME}: (PASS) Service ${_STARTED_MSG}"
    fi
}

function wait_for_service_to_start() {
    wait_loop tmux_session_exists "tmux session" "tmux session to start" "tmux session started"
    wait_loop service_process_is_running "process" "process to start" "process started"
    wait_loop service_is_alive "responsiveness" "to respond" "is responding"
    START_FAILED=0
    if [[ -f /tmp/${SERVICE_NAME}_start_failed ]]; then
        echo "${MSG_NOT_RUNNING}"
        rm -r /tmp/${SERVICE_NAME}_start_failed
    else
        echo "${MSG_RUNNING}"
    fi
}

function usage() {
    echo "Usage: ${SERVICE_CONF_DIR}/${SCRIPT_NAME} {start|stop|restart|status}"
}

function status() {
    # Check if the tmux session is running.
    if [[ "$(tmux_session_exists)" == "0" ]]; then
        echo "${MSG_NOT_RUNNING}"
        exit 1
    fi

    # Check if the service process is running.
    if [[ "$(service_process_is_running)" == "0" ]]; then
        echo "${MSG_NOT_RUNNING}"
        exit 1
    fi

    # Check the service itself.
    if [[ "$(service_is_alive)" == "0" ]]; then
        echo "${MSG_NOT_RUNNING}"
        exit 1
    fi

    echo "${MSG_RUNNING}"
}

function start() {
    if [[ "$(status)" == "${MSG_RUNNING}" ]]; then
        echo "${SERVICE_DISPLAY_NAME} is already running"
        exit 1
    fi

    tmux_kill_session
    echo "Starting ${SERVICE_DISPLAY_NAME}"
    if [[ "${TURN_OFF_SINGLE_LINE_TIMEOUT_COUNTDOWN}" == "1" ]]; then
        echo "(Timeout countdown disabled)"
    fi
    if [[ "${IGNORE_SERVICE_START_FAILURES}" == "1" ]]; then
        echo "(Ignoring service start failures)"
    fi
    tmux_start_session

# TODO: Fix the logging so that it works with tee.
# For some reason piping the output to tee does not work.
#    tmux_execute_cmd ${TMUX_SESSION} "echo \" \" > ${LOG}"
#    sleep 0.5
#    tmux_execute_cmd ${TMUX_SESSION} "python3 ${INSTALL_DIR}/health_check_service.py 2>&1 |tee ${LOG}"

# So to see the output you'll have to join the tmux session that this script runs in.
    tmux_execute_cmd ${TMUX_SESSION} "python3 ${INSTALL_DIR}/health_check_service.py 2>&1"

    wait_for_service_to_start

    if [[ "${START_FAILED}" == "1" ]]; then
        exit 1
    fi
}

function stop() {
    tmux_kill_session
    if [[ "${MSG_NOT_RUNNING}" == "$(status)" ]]; then
        echo "${SERVICE_DISPLAY_NAME} is stopped"
    else
        echo "Failed to stop ${SERVICE_DISPLAY_NAME}"
        exit 1
    fi
}

function restart() {
    stop
    start
}

# Create log directory if it does not exist.
if [[ ! -d "${LOG_DIR}" ]]; then
    echo "Creating log directory: \"${LOG_DIR}\""
    mkdir -p ${LOG_DIR}
fi

while (( "$#" )); do
    case "$1" in
        start)
            START=1
            shift;;

        stop)
            stop
            shift;;

        restart)
            restart
            shift;;

        status)
            status
            shift;;

        -o|--turn_off_single_line_timeout_countdown)
            TURN_OFF_SINGLE_LINE_TIMEOUT_COUNTDOWN=1
            shift;;

        -i|--ignore_service_start_failures)
            IGNORE_SERVICE_START_FAILURES=1
            shift;;

        -n|--no_wait_timeout)
            START_WAIT_TIMEOUT=0
            shift;;

        *)
            echo "Unknown arg: \"${1}\""
            usage
            exit 1
    esac
done

if [[ "${START}" == "1" ]]; then
    start
fi

exit 0
